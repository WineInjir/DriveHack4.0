let messages = [];

// üé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
const micBtn = document.getElementById("micBtn");
micBtn.addEventListener("click", startRecognition);

// üöÄ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∏
function startRecognition() {
  if (!("webkitSpeechRecognition" in window)) {
    alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.");
    return;
  }

  const recognition = new webkitSpeechRecognition();
  recognition.lang = "ru-RU";
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  recognition.start();

  recognition.onstart = () => {
    micBtn.innerText = "üéß"; // –ê–∫—Ç–∏–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞
  };

  recognition.onerror = (event) => {
    alert("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: " + event.error);
    micBtn.innerText = "üé§";
  };

  recognition.onend = () => {
    micBtn.innerText = "üé§"; // –í–µ—Ä–Ω—É—Ç—å –∏–∫–æ–Ω–∫—É
  };

  recognition.onresult = (event) => {
    const result = event.results[0][0].transcript;
    const input = document.getElementById("userInput");
    input.value = "";
    typeTextToInput(input, result); // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
  };
}

// ‚ú® –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
function typeTextToInput(inputElement, text, speed = 50) {
  let index = 0;
  function type() {
    if (index < text.length) {
      inputElement.value += text.charAt(index);
      index++;
      setTimeout(type, speed);
    }
  }
  type();
}

// üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function speak(text) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = "ru-RU";
  utterance.rate = 1;
  window.speechSynthesis.speak(utterance);
}

// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
  const input = document.getElementById("userInput");
  const userText = input.value.trim();
  if (!userText) return;

  addMessage("–í—ã", userText, "user");
  messages.push({ role: "user", content: userText });
  input.value = "";

  try {
    const response = await fetch("/api/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        messages: messages
      })
    });

    const data = await response.json();

    if (data.choices && data.choices[0]) {
      const botReply = data.choices[0].message.content;
      messages.push({ role: "assistant", content: botReply });
      addMessage("–ë–æ—Ç", botReply, "bot");
      speak(botReply); // –û–∑–≤—É—á–∫–∞
    } else {
      addMessage("–ë–æ—Ç", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.", "bot");
    }
  } catch (error) {
    addMessage("–ë–æ—Ç", "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "bot");
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
  }
}

// üß± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(sender, text, cssClass) {
  const chat = document.getElementById("chat");
  const messageEl = document.createElement("div");
  messageEl.className = `message ${cssClass}`;
  messageEl.innerHTML = `<strong>${sender}:</strong> ${text}`;
  chat.appendChild(messageEl);
  chat.scrollTop = chat.scrollHeight;
}
