from sanic import Sanic
from sanic.response import json, file
import aiohttp, pathlib, uuid, traceback, base64, tempfile, os
from gtts import gTTS
from datetime import datetime

# ==============================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================
CLIENT_ID = "0199e745-9630-7908-af85-10afefaba1f9"
CLIENT_SECRET = "08a0b6ae-0d81-4829-b6ec-0ca91aa08553"

OAUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
CHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–∞ üöá. "
    "–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ–º–æ–≥–∞–π –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
    "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –Ω–∏–∫–∞–∫–∏—Ö –æ–±—å—è—Å–Ω–µ–Ω–∏–π –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö –∏ –ø–æ—Å—Ç —Å–∫—Ä–∏–ø—Ç—É–º–æ–≤, —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ, –∫–æ—Ä–æ—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ —Ä–æ –¥–µ–ª—É, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ –Ω–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
)

# ==============================
# ‚öôÔ∏è –ü–£–¢–ò
# ==============================
BASE_DIR = pathlib.Path(__file__).resolve().parent
ROOT_DIR = BASE_DIR.parent
STATIC_DIR = pathlib.Path("metro-chatbot")  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
TOKEN_FILE = BASE_DIR / "token.txt"
LOG_FILE = BASE_DIR / "server.log"

app = Sanic("MetroChatBot")

print(f"üìÅ BASE_DIR: {BASE_DIR}")
print(f"üìÅ STATIC_DIR: {STATIC_DIR}")
print(f"üìÑ TOKEN_FILE: {TOKEN_FILE}")
print(f"ü™µ LOG_FILE: {LOG_FILE}")

# –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ index.html
index_path = STATIC_DIR / "index.html"
if not index_path.exists():
    print(f"‚ö†Ô∏è –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏: {index_path}")
else:
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω index.html: {index_path}")

# ==============================
# üßæ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ==============================
def write_log(message: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ server.log"""
    time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{time}] {message}\n")
    print(message)

# ==============================
# üåê –†–û–£–¢–´
# ==============================
@app.get("/")
async def root(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    if not index_path.exists():
        write_log("‚ùå index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ /")
        return json({"error": f"–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {index_path}"}, status=404)
    write_log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω index.html –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    return await file(str(index_path))

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (–∏–º–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã)
app.static("/css", str(STATIC_DIR / "css"), name="css_static")
app.static("/js", str(STATIC_DIR / "js"), name="js_static")
app.static("/audio", tempfile.gettempdir(), name="audio_static")

# ==============================
# üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
# ==============================
async def get_access_token():
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_b64 = base64.b64encode(auth_string.encode()).decode()

    headers = {
        "Authorization": f"Basic {auth_b64}",
        "RqUID": str(uuid.uuid4()),
        "Content-Type": "application/x-www-form-urlencoded",
    }
    data = {"scope": "GIGACHAT_API_PERS"}

    write_log("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ access_token...")

    async with aiohttp.ClientSession() as session:
        async with session.post(OAUTH_URL, headers=headers, data=data, ssl=False) as resp:
            text = await resp.text()
            if resp.status != 200:
                write_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ ({resp.status}): {text}")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ ({resp.status}): {text}")
            j = await resp.json()
            token = j.get("access_token")
            if not token:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å access_token: {text}")
            TOKEN_FILE.write_text(token)
            write_log("‚úÖ access_token –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            return token

# ==============================
# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
# ==============================
@app.post("/api/chat")
async def chat(request):
    try:
        data = request.json or {}
        msgs = data.get("messages", [])
        user_text = msgs[-1]["content"] if msgs else ""
        write_log(f"üí¨ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = TOKEN_FILE.read_text().strip() if TOKEN_FILE.exists() else ""
        if not token or len(token) < 10:
            write_log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
            token = await get_access_token()

        payload = {
            "model": "GigaChat",
            "messages": [{"role": "system", "content": SYSTEM_PROMPT}] + msgs,
            "temperature": 0.6,
            "max_tokens": 700,
        }

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "X-Request-ID": str(uuid.uuid4()),
        }

        async with aiohttp.ClientSession() as s:
            async with s.post(CHAT_URL, json=payload, headers=headers, ssl=False) as r:
                text = await r.text()
                if r.status != 200:
                    if r.status == 401:
                        write_log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ ‚Äî –ø–æ–ª—É—á–∞—é –Ω–æ–≤—ã–π...")
                        token = await get_access_token()
                        headers["Authorization"] = f"Bearer {token}"
                        async with s.post(CHAT_URL, json=payload, headers=headers, ssl=False) as r2:
                            answer = await r2.json(content_type=None)
                    else:
                        write_log(f"‚ùå –û—à–∏–±–∫–∞ GigaChat ({r.status}): {text}")
                        raise Exception(f"GigaChat –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π {r.status}: {text}")
                else:
                    answer = await r.json(content_type=None)

        bot_text = answer["choices"][0]["message"]["content"]
        write_log(f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_text[:100]}...")

        # üé§ –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ gTTS
        tts = gTTS(bot_text, lang="ru")
        temp_audio = os.path.join(tempfile.gettempdir(), f"voice_{uuid.uuid4()}.mp3")
        tts.save(temp_audio)
        write_log(f"üéß –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_audio}")

        return json({
            "reply": bot_text,
            "audio_url": f"/audio/{os.path.basename(temp_audio)}"
        })

    except Exception as e:
        err = f"‚ùå –û—à–∏–±–∫–∞ /api/chat: {e}"
        write_log(err)
        write_log(traceback.format_exc())
        return json({"error": str(e)}, status=500)

# ==============================
# üöÄ –ó–ê–ü–£–°–ö
# ==============================
if __name__ == "__main__":
    write_log("üöÄ –°–µ—Ä–≤–µ—Ä MetroChatBot –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8080")
    app.run(host="127.0.0.1", port=8080, single_process=True, access_log=True)
